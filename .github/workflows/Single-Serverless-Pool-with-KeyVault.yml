name: Update Azure Synapse Serverless SQL Pool

# Sample of how to deploy to an Azure Synapse Serverless SQL Pool using GitHub Actions
# This version works with Azure Key Vault
# You can use a self-hosted runner installed locally for this to work
# You can also use a GitHub-hosted runner

# For this pipeline you also need to setup the below secrets in Key Vault
  # ServerlessEndPoint - Your Serverless SQL Pool endpoint 
    #(the one that ends with -ondemand)
  # ServerlessDatabase - The database in the SQL Pool you want the update deployed to
    # Note it has to exist BEFORE this the scripts are run
  # SQLUserName - User name to connect to the Serverless SQL Pool endpoint
    # try and keep this secret
  # SQLPw - Password of above user, definitely keep this one secret

#Sets the trigger to update when update is pushed to main branch
on:
  push:
    branches: 
      - main

jobs:

  # Job to install the scripts
  ServerlessPoolUpdates:
    # Easier to use Github-hosted runner if updating in GitHub
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Note that I am using latest version of action
      - uses: actions/checkout@v3 

      # install dbops PowerShell module
      - name: Install dbops module
        run: 'Install-Module -Name dbops -Force -PassThru'

      - uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: '${{ secrets.AZURE_KEYVAULT }}'
          secrets: 'SQLPw, ServerlessEndPoint, ServerlessDatabase, SQLUserName'
        id: myKeyVaultSecrets 

      # Run migration-based scripts
      - name: Run migration-based scripts
        run: |
          $SecurePw=ConvertTo-SecureString ${{ steps.myKeyVaultSecrets.outputs.SQLPw }} –asplaintext –force
          Install-DBOScript -ScriptPath scripts -sqlinstance ${{ steps.myKeyVaultSecrets.outputs.ServerlessEndPoint }} -Database ${{ steps.myKeyVaultSecrets.outputs.ServerlessDatabase }} -UserName ${{ steps.myKeyVaultSecrets.outputs.SQLUserName }} -Password $SecurePw -SchemaVersionTable $null
